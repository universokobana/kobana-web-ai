#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler'
Bundler.setup(:default)

require 'dotenv/load'
require_relative '../config/1password'
require 'net/http'
require 'uri'
require 'json'
require 'fileutils'
require 'kramdown'

# Check if API token is set
unless ENV.fetch('INTERCOM_API_TOKEN', nil)
  puts 'Error: INTERCOM_API_TOKEN environment variable is not set'
  exit 1
end

# Create content directory if it doesn't exist
content_dir = File.join(File.dirname(__FILE__), '..', 'content')
FileUtils.mkdir_p(content_dir)

# Intercom API configuration
api_token = ENV.fetch('INTERCOM_API_TOKEN', nil)
base_url = 'https://api.intercom.io'
articles_endpoint = '/articles'

def slug(string)
  string.downcase
        .gsub(/[^a-z0-9\s-]/, '')  # Remove special characters
        .gsub(/\s+/, '-')          # Replace spaces with dahshes
        .gsub(/-+/, '-')           # Remove duplicate underscores
        .gsub(/^-|-$/, '')         # Remove leading/trailing underscores
end

def fetch_articles(api_token, url)
  uri = URI(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true

  request = Net::HTTP::Get.new(uri)
  request['Authorization'] = "Bearer #{api_token}"
  request['Accept'] = 'application/json'
  request['Intercom-Version'] = '2.11'

  response = http.request(request)

  unless response.code == '200'
    puts "Error fetching articles: #{response.code} - #{response.body}"
    exit 1
  end

  JSON.parse(response.body)
end

def article_as_markdown(article)
  return [] unless article['state'] == 'published'

  # Generate filename from title
  # filename = underscorize(article['title']) + '.md'
  # filepath = File.join(content_dir, filename)

  # Create markdown content
  markdown_content = []

  # Add title
  markdown_content << "# #{article['title']}"
  markdown_content << ''

  # Add metadata
  # markdown_content << "**Article ID:** #{article['id']}"
  # markdown_content << "**Type:** #{article['type']}"
  # markdown_content << "**State:** #{article['state']}"
  # markdown_content << "**Created:** #{article['created_at']}"
  # markdown_content << "**Updated:** #{article['updated_at']}"

  # markdown_content << "**Author ID:** #{article['author_id']}" if article['author_id']

  # markdown_content << "**Parent ID:** #{article['parent_id']}" if article['parent_id']

  # markdown_content << ''
  # markdown_content << '---'
  # markdown_content << ''

  # Add description if available
  if article['description'] && !article['description'].empty?
    markdown_content << '## Descrição'
    markdown_content << ''
    markdown_content << article['description']
    markdown_content << ''
  end

  # Add body content
  if article['body'] && !article['body'].empty?
    markdown_content << '## Conteúdo'
    markdown_content << ''
    # Convert HTML to markdown using kramdown
    body = Kramdown::Document.new(article['body'], input: 'html').to_kramdown
    markdown_content << body
  end

  markdown_content << ''
  markdown_content << '---'
  markdown_content << ''

  markdown_content
  # Write to file
  # File.write(filepath, markdown_content.join("\n"))
  # puts "Saved: #{filename}"
end

if File.exist?(File.join(content_dir, 'articles.json'))
  puts 'Index file already exists. Skipping update.'
  all_articles = JSON.parse(File.read(File.join(content_dir, 'articles.json')))
else
  # Main execution
  puts 'Fetching articles from Intercom API...'

  all_articles = []
  next_page = "#{base_url}#{articles_endpoint}"

  # Fetch all pages
  while next_page
    data = fetch_articles(api_token, next_page)

    all_articles.concat(data['data']) if data['data']

    # Check for next page
    next_page = data.dig('pages', 'next')

    puts 'Fetching next page...' if next_page
  end

  File.write(File.join(content_dir, 'index.json'), JSON.pretty_generate(all_articles))
end

puts "Found #{all_articles.length} articles"

indice = []
articles = []
all_articles.each do |article|
  puts "⚙️  #{article['title']} (ID: #{article['id']})"
  indice << "#{indice.size + 1}. [#{article['title']}](##{slug(article['title'])})"
  articles += article_as_markdown(article)
end

markdown_content = [
  '# Kobana - Artigos da Base de Conhecimento',
  '',
  '## Índice de Conteúdos'
]
markdown_content += indice
markdown_content << ''
markdown_content << '---'
markdown_content << ''
markdown_content += articles

filepath = File.join(File.dirname(__FILE__), '..', 'views', 'pt-BR', 'artigos.md')
File.write(filepath, markdown_content.join("\n"))

puts "✅  Done! Processed #{all_articles.length} articles"
